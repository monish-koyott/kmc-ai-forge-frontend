<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="KmcAiBlazorApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    
    <script>
        // Function to trigger file input click
        window.triggerFileInput = function () {
            try {
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    fileInput.click();
                }
            } catch (error) {
                console.error('Error in triggerFileInput:', error);
            }
        };

        // Drag and drop functionality
        window.setupDragAndDrop = function (dropZoneId, dotNetHelper) {
            const dropZone = document.getElementById(dropZoneId);
            if (!dropZone) return;

            // Prevent default drag behaviors
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
                document.body.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            // Highlight drop zone when item is dragged over it
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });

            function highlight(e) {
                dropZone.classList.add('drag-over');
            }

            function unhighlight(e) {
                dropZone.classList.remove('drag-over');
            }

            // Handle dropped files
            dropZone.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                
                console.log('Files dropped:', files);
                console.log('File count:', files.length);
                
                if (files.length > 0) {
                    // Get the file input element
                    const fileInput = document.querySelector('input[type="file"]');
                    if (fileInput) {
                        // Create a new DataTransfer object and add the dropped files
                        const dataTransfer = new DataTransfer();
                        Array.from(files).forEach(file => dataTransfer.items.add(file));
                        
                        // Set the files to the input element
                        fileInput.files = dataTransfer.files;
                        
                        // Trigger the change event to simulate file selection
                        const changeEvent = new Event('change', { bubbles: true });
                        fileInput.dispatchEvent(changeEvent);
                        
                        console.log('Files set to input and change event triggered');
                    } else {
                        console.error('File input not found');
                    }
                }
            }
        };

        // Helper function to convert File objects to UploadedFile data
        window.convertFileToUploadedFile = function (file) {
            console.log('Converting file:', file);
            console.log('File properties:', {
                name: file.name,
                size: file.size,
                type: file.type,
                lastModified: file.lastModified
            });
            
            return {
                name: file.name || '',
                size: file.size || 0,
                contentType: file.type || '',
                lastModified: file.lastModified || 0
            };
        };
    </script>
</body>

</html>
